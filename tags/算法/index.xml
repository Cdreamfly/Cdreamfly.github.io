<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 只要逆流而上</title>
    <link>https://Cdreamfly.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 只要逆流而上</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 Jan 2020 16:01:23 +0800</lastBuildDate>
    
	<atom:link href="https://Cdreamfly.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1.两数之和</title>
      <link>https://Cdreamfly.github.io/post/1.-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Wed, 01 Jan 2020 16:01:23 +0800</pubDate>
      
      <guid>https://Cdreamfly.github.io/post/1.-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>1. 两数之和 给定一个整数数组 nums和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输</description>
    </item>
    
    <item>
      <title>13.罗马数字转整数</title>
      <link>https://Cdreamfly.github.io/post/13.-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 16:01:23 +0800</pubDate>
      
      <guid>https://Cdreamfly.github.io/post/13.-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</guid>
      <description>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。 字符 数值 I 1 V 5 X 10 L 50 C 100 D 500 M 1000 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做</description>
    </item>
    
    <item>
      <title>7.整数反转</title>
      <link>https://Cdreamfly.github.io/post/7.-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</link>
      <pubDate>Wed, 01 Jan 2020 16:01:23 +0800</pubDate>
      
      <guid>https://Cdreamfly.github.io/post/7.-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</guid>
      <description>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。 示例 1: 输入: 123 输出: 321 示例 2: 示例 2: 输入: -123 输出: -321 示例 3: 示例 3: 输入: 120 输出</description>
    </item>
    
    <item>
      <title>9.回文数</title>
      <link>https://Cdreamfly.github.io/post/9.-%E5%9B%9E%E6%96%87%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 16:01:23 +0800</pubDate>
      
      <guid>https://Cdreamfly.github.io/post/9.-%E5%9B%9E%E6%96%87%E6%95%B0/</guid>
      <description>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。 示例 1: 输入: 121 输出: true 示例 2: 输入: -121 输出: false 解释: 从</description>
    </item>
    
    <item>
      <title>二叉树（链表表示）</title>
      <link>https://Cdreamfly.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%93%BE%E8%A1%A8%E8%A1%A8%E7%A4%BA/</link>
      <pubDate>Wed, 01 Jan 2020 16:01:23 +0800</pubDate>
      
      <guid>https://Cdreamfly.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%93%BE%E8%A1%A8%E8%A1%A8%E7%A4%BA/</guid>
      <description>Node.h #pragma once class Node { public: Node(); Node* SearchNode(int indexnode); void DeleteNode(); void PreorderTraversal(); void InorderTraversal(); void PostorderTraversal(); int index; int data; Node* pLChild; Node* pRChild; Node* pParent; }; Node.cpp #include &amp;quot;Node.h&amp;quot; #include&amp;lt;iostream&amp;gt; using namespace std; Node::Node() { index = 0; data = 0; pLChild = nullptr; pRChild = nullptr; pParent = nullptr; } Node* Node::SearchNode(int nodeindex) { Node* temp = nullptr; if (this-&amp;gt;index == nodeindex)return this; if (this-&amp;gt;pLChild</description>
    </item>
    
    <item>
      <title>数据结构之图</title>
      <link>https://Cdreamfly.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE/</link>
      <pubDate>Wed, 01 Jan 2020 16:01:23 +0800</pubDate>
      
      <guid>https://Cdreamfly.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE/</guid>
      <description>1. 图的定义 图（graph） 是由一些点（vertex） 和这些点之间的连线（edge） 所组成的；其中，点通常称为顶点（vertex），而点到点之</description>
    </item>
    
    <item>
      <title>数据结构之树</title>
      <link>https://Cdreamfly.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/</link>
      <pubDate>Wed, 01 Jan 2020 16:01:23 +0800</pubDate>
      
      <guid>https://Cdreamfly.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/</guid>
      <description>本质问题 树不是线性表，是一种描述非线性层次关系的数据结构。描述的是一对多的数据结构。 1. 树的定义 树(Tree)的基本概念 树是由结点或顶点和边组</description>
    </item>
    
  </channel>
</rss>