<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>二叉树 on 只要逆流而上</title>
    <link>https://Cdreamfly.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
    <description>Recent content in 二叉树 on 只要逆流而上</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 Jan 2020 16:01:23 +0800</lastBuildDate>
    
	<atom:link href="https://Cdreamfly.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>二叉树（链表表示）</title>
      <link>https://Cdreamfly.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%93%BE%E8%A1%A8%E8%A1%A8%E7%A4%BA/</link>
      <pubDate>Wed, 01 Jan 2020 16:01:23 +0800</pubDate>
      
      <guid>https://Cdreamfly.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%93%BE%E8%A1%A8%E8%A1%A8%E7%A4%BA/</guid>
      <description>Node.h #pragma once class Node { public: Node(); Node* SearchNode(int indexnode); void DeleteNode(); void PreorderTraversal(); void InorderTraversal(); void PostorderTraversal(); int index; int data; Node* pLChild; Node* pRChild; Node* pParent; }; Node.cpp #include &amp;quot;Node.h&amp;quot; #include&amp;lt;iostream&amp;gt; using namespace std; Node::Node() { index = 0; data = 0; pLChild = nullptr; pRChild = nullptr; pParent = nullptr; } Node* Node::SearchNode(int nodeindex) { Node* temp = nullptr; if (this-&amp;gt;index == nodeindex)return this; if (this-&amp;gt;pLChild</description>
    </item>
    
    <item>
      <title>数据结构之树</title>
      <link>https://Cdreamfly.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/</link>
      <pubDate>Wed, 01 Jan 2020 16:01:23 +0800</pubDate>
      
      <guid>https://Cdreamfly.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/</guid>
      <description>本质问题 树不是线性表，是一种描述非线性层次关系的数据结构。描述的是一对多的数据结构。 1. 树的定义 树(Tree)的基本概念 树是由结点或顶点和边组</description>
    </item>
    
  </channel>
</rss>